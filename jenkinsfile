triggers {
    cron('00 8 * * 4') // Schedule the pipeline to run every Thursday at 8:00 AM IST
}

stage('Check for New Commits and Update YAML') {

    def mainBranch = "main"
    def sanityBranch = "sanity-test"
    
    // Fetch the latest changes from the remote repository
    checkout([$class: 'GitSCM', branches: [[name: "refs/heads/${mainBranch}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/yourusername/yourrepository.git']]])

    // Get the commit hashes of the last commit on main and sanity-test branches
    def mainCommit = sh(script: "git log -1 --format=%H origin/${mainBranch}", returnStdout: true).trim()
    def sanityCommit = sh(script: "git log -1 --format=%H origin/${sanityBranch}", returnStdout: true).trim()

    // Check if there are any new commits on main compared to sanity-test
    if (mainCommit != sanityCommit) {
        echo "New commits found on ${mainBranch} branch. Triggering the build..."

        // Ensure the workspace is clean
        sh "git reset --hard HEAD"

        // Checkout and merge the sanity branch into the main branch
        sh "git checkout ${mainBranch}"
        sh "git pull origin ${mainBranch}"
        sh "git merge ${sanityBranch}"

        // Push the changes to the main branch
        sh "git push origin ${mainBranch}"

    } else {
        echo "No new commits on ${mainBranch} branch. Skipping the build."

    }
}


stage("Replacing the branch") {

    def ClusterBlueprintPath = "cd-cluster/cluster/scl/qscl02/cck8s1-qscl02-sanity-1/flux-system/cluster-blueprint.yaml"
    def dynamicPath = ClusterBlueprintPath.substring(ClusterBlueprintPath.indexOf("cck8s1"))

    // check if the cluster Blueprint file exists
    def exists = fileExists(ClusterBlueprintPath)

    if (exists) {
        // Read the current content and update the cluster Blueprint file
        def currentContent = readFile(ClusterBlueprintPath
        def newContent = currentContent.replace(/branch: .*$/, "branch: ${dynamicPath}")
                            
        // update the cluster blueprint file
        writeFile file: ClusterBlueprintPath, text: newContent
    }
}